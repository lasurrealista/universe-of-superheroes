const app = require('./server');
const mongoose = require('mongoose');
const config = require('config');
const { response } = require('express');

const supertest = require('supertest');
const superagent = require('superagent');
const logger = require('./config/logger');
const marvelCharacters = require('./models/marvelCharacter.model');

describe('REST API integration tests', () => {

    const insertMarvelCharacters = [{
        "id": 1,
        "name": "Adam Warlock",
        "thumbnail": "http://i.annihil.us/u/prod/marvel/i/mg/a/f0/5202887448860,jpg",
        "profile": "http://marvel.com/universe/Warlock,_Adam?utm_campaign=apiRef&utm_source=14f4ae6a45f097d65a5b56530da74ecc",
        "url": "http://marvel.com/comics/characters/1010354/adam_warlock?utm_campaign=apiRef&utm_source=14f4ae6a45f097d65a5b56530da74ecc",
        "stories": 217
      },{
        "id": 2,
        "name": "Aegis (Trey Rollins)",
        "thumbnail": "http://i.annihil.us/u/prod/marvel/i/mg/5/e0/4c0035c9c425d.gif",
        "profile": "http://marvel.com/universe/Aegis_%28Trey_Rollins%29?utm_campaign=apiRef&utm_source=14f4ae6a45f097d65a5b56530da74ecc",
        "url": "https://www.marvel.com/comics?&options%5Boffset%5D=0&totalcount=12",
        "stories": 0
      },{
        "id": 3,
        "name": "Adam Destine",
        "thumbnail": "http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg",
        "profile": "http://marvel.com/universe/Destine,_Adam?utm_campaign=apiRef&utm_source=14f4ae6a45f097d65a5b56530da74ecc",
        "url": "https://www.marvel.com/comics?&options%5Boffset%5D=0&totalcount=12",
        "stories": 0}];

    let lastAccessToken = '';
    
    beforeEach(done => {

        const { host } = config.get('database');

        mongoose
            .connect(host, {
                useNewUrlParser: true,
                useUnifiedTopology: true
            })
            .then(() => {
                done();
            })
            .catch(err => {
                logger.error(err);
                process.exit();
            });

        superagent
            .post(host)
            .send({ email: 'jmottinelli2d@reuters.com', password: '$2a$10$u7hjgNaac3eKrcDvBLObTerNYNhEUkIOqK/GjCB0fTyYMqWaVTwl2' }) // sends a JSON post body
            .set('Content-Type', `application/json`)
            .set('accept', 'json')
            .end((err, res) => {
                if (err) {
                    logger.error(err);
                    return done();
                }
                lastAccessToken = res.body.accessToken;
                done();
            });
        }
    );

    afterEach(done => {
        mongoose.connection.db.dropDatabase(() => {
            mongoose.connection.close(() => done())
        });
    });

    test('GET /marvel-characters', () => {
        return marvelCharacters.insertMany(insertMarvelCharacters)
            .then(() => supertest(app).get('/marvel-characters').expect(200))
            .then(response => {
                expect(Array.isArray(response.body)).toBeTruthy();
                expect(response.body.length).toEqual(insertMarvelCharacters.length);

                response.body.forEach((marvelCharacter, index) => {
                    expect(marvelCharacter.name).toBe(insertMarvelCharacters[index].name);
                    expect(marvelCharacter.thumbnail).toEqual(insertMarvelCharacters[index].thumbnail);
                    expect(marvelCharacter.profile).toBe(insertMarvelCharacters[index].profile);
                    expect(marvelCharacter.url).toBe(insertMarvelCharacters[index].url);
                    expect(marvelCharacter.stories).toBe(insertMarvelCharacters[index].stories);
                });
            });
    });

    test('GET /marvel-characters/:id', () => {
        let marvelCharacterId;
        return marvelCharacters.insertMany(insertMarvelCharacters)
            .then(marvelCharacters => {
                marvelCharacterId = marvelCharacters[0].id;
                return supertest(app).get(`/marvel-characters/${marvelCharacterId}`).expect(200);
            })
            .then(response => {
                const marvelCharacter = response.body;
                expect(marvelCharacter.name).toBe(insertMarvelCharacters[0].name);
                expect(marvelCharacter.thumbnail).toEqual(insertMarvelCharacters[0].thumbnail);
                expect(marvelCharacter.profile).toBe(insertMarvelCharacters[0].profile);
                expect(marvelCharacter.url).toBe(insertMarvelCharacters[0].url);
                expect(marvelCharacter.stories).toBe(insertMarvelCharacters[0].stories);
            });
    });
});
